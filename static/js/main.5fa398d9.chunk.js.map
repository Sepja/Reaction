{"version":3,"sources":["logo.svg","components/SignGenerator.js","components/APM.js","components/Accuracy.js","components/ReactionArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","difficult","APM","props","ticks","keysPressed","React","useState","elapsedTime","setElapsedTime","useEffect","timer","window","setInterval","previousState","clearInterval","className","toFixed","Accuracy","right","wrong","ReactionArea","lastCharacterPressed","setLastCharacterPressed","score","setScore","randomCharacter","setRandomCharacter","setKeysPressed","setRight","setWrong","determineRandomCharacter","difficulty","easy","resultArray","charAt","length","Math","random","getRandomSign","onKeyPress","e","prevState","key","onKeyPressed","tabIndex","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fa398d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nexport const difficult = {\r\n    easy:1,\r\n    medium:2\r\n}\r\n\r\nexport function getRandomSign(difficulty){\r\n    const easy = \"abcdefghijklmnopqrstuvwxyz,.-\";\r\n    const medium = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ;:-\";\r\n\r\n    let resultArray = \"\";\r\n    if(difficulty === difficult.easy){\r\n        resultArray += easy;\r\n    }else if(difficulty === difficult.medium){\r\n        resultArray += easy;\r\n        resultArray += medium;\r\n    }\r\n    return resultArray.charAt(resultArray.length * Math.random());\r\n}","import React from \"react\";\r\n\r\n\r\n\r\nexport function APM(props){\r\n\r\n    let ticks = props.ticks != null?props.ticks:50\r\n    let keysPressed = props.keysPressed != null?props.keysPressed:0\r\n    const[elapsedTime,setElapsedTime] = React.useState(0)\r\n    React.useEffect(() => {\r\n        const timer = window.setInterval(() =>  setElapsedTime(previousState => previousState+1/ticks) , 1000/ticks);\r\n        return () => window.clearInterval(timer);\r\n        }\r\n        , []);\r\n\r\n    return <div className=\"apm\">\r\n            <div>Elapsed Time {elapsedTime.toFixed(2)}</div>\r\n            <div>Actions per Minute {(keysPressed/(elapsedTime/60)).toFixed(2)}</div>\r\n\r\n           </div>\r\n}","import React from \"react\";\r\n\r\n\r\nexport function Accuracy(props){\r\n    function calculateAccuracy() {\r\n        if(props.right === 0 && props.wrong === 0){\r\n            return 0;\r\n        }else{\r\n            return (props.right/(props.wrong+props.right)) * 100\r\n        }\r\n    }\r\n    return <div>\r\n        <div className=\"accuracy\">\r\n            <div className=\"accuracyRatio\">\r\n                <div className=\"accuracyRatio-right\">{props.right}</div>\r\n                /\r\n                <div className=\"accuracyRatio-wrong\">{props.wrong}</div>\r\n            </div>\r\n            <div className=\"accuracyPercentage\">Accuracy: {calculateAccuracy().toFixed(2)}%</div>\r\n        </div>\r\n\r\n    </div>\r\n}","import React, {useEffect} from \"react\";\r\nimport {difficult, getRandomSign} from \"./SignGenerator\";\r\nimport {APM} from \"./APM\";\r\nimport {Accuracy} from \"./Accuracy\";\r\n\r\n\r\nexport function  ReactionArea(){\r\n\r\n\r\n\r\n    const[lastCharacterPressed,setLastCharacterPressed] = React.useState(\"\")\r\n    const[score,setScore] = React.useState(0);\r\n    const[randomCharacter,setRandomCharacter] = React.useState(\"\")\r\n    const[keysPressed,setKeysPressed] = React.useState(0)\r\n    const[right,setRight] = React.useState(0)\r\n    const[wrong,setWrong] = React.useState(0)\r\n    function determineRandomCharacter() {\r\n        return getRandomSign(difficult.medium)\r\n    }\r\n\r\n    useEffect(\r\n    () => {\r\n        setInterval(setRandomCharacter(determineRandomCharacter()), 5000);\r\n    },[lastCharacterPressed,score]\r\n    )\r\n\r\n    function onKeyPressed(e) {\r\n        setKeysPressed(prevState => prevState+1)\r\n        if(e.key == 16){\r\n            return;\r\n        }\r\n        if(e.key === randomCharacter){\r\n            setScore(prevState => prevState+1);\r\n            setRight(prevState => prevState +1);\r\n        }else{\r\n            setWrong(prevState => prevState +1);\r\n            setScore(prevState => prevState-1);\r\n        }\r\n        setLastCharacterPressed(e.key)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"reactArea\"\r\n            onKeyPress={e => onKeyPressed(e)}\r\n            tabIndex={0}\r\n            >\r\n            <APM keysPressed={keysPressed}></APM>\r\n            <div className=\"centerFlex\">\r\n            <div className=\"score\">Score {score}</div>\r\n                <Accuracy right={right} wrong={wrong}/>\r\n\r\n            </div>\r\n            <div className=\"gap-20\"></div>\r\n            <div className=\"gap-20\"></div>\r\n            <div className=\"gap-20\"></div>\r\n            <div className=\"gap-20\"></div>\r\n            <div className=\"centerFlex\">\r\n                <div className= \"huge\">Press:   {randomCharacter}</div>\r\n                <h3>Last Character pressed:{lastCharacterPressed}</h3>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {ReactionArea} from \"./components/ReactionArea\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ReactionArea></ReactionArea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
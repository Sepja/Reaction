{"version":3,"sources":["logo.svg","components/SignGenerator.js","components/ReactionArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","difficult","ReactionArea","React","useState","lastCharacterPressed","setLastCharacterPressed","score","setScore","randomCharacter","setRandomCharacter","determineRandomCharacter","difficulty","easy","resultArray","charAt","length","Math","random","getRandomSign","useEffect","setInterval","className","onKeyPress","e","key","prevState","onKeyPressed","tabIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,oHCE9BC,EACJ,EADIA,EAEF,ECAJ,SAAUC,IAAe,IAAD,EAI2BC,IAAMC,SAAS,IAJ1C,mBAIrBC,EAJqB,KAIAC,EAJA,OAKHH,IAAMC,SAAS,GALZ,mBAKrBG,EALqB,KAKfC,EALe,OAMiBL,IAAMC,SAAS,IANhC,mBAMrBK,EANqB,KAMLC,EANK,KAQ3B,SAASC,IACL,ODND,SAAuBC,GAC1B,IAAMC,EAAO,gCAGTC,EAAc,GAOlB,OANGF,IAAeX,EACda,GAAeD,EACVD,IAAeX,IACpBa,GAAeD,EACfC,GAPW,iCASRA,EAAYC,OAAOD,EAAYE,OAASC,KAAKC,UCLzCC,CAAclB,GAqBzB,OAlBAmB,qBACA,WACIC,YAAYX,EAAmBC,KAA6B,OAC9D,CAACN,EAAqBE,IAgBpB,yBACIe,UAAU,YACVC,WAAY,SAAAC,GAAC,OAfrB,SAAsBA,GACN,IAATA,EAAEC,MAGFD,EAAEC,MAAQhB,EACTD,GAAS,SAAAkB,GAAS,OAAIA,EAAU,KAEhClB,GAAS,SAAAkB,GAAS,OAAIA,EAAU,KAEpCpB,EAAwBkB,EAAEC,MAMLE,CAAaH,IAC9BI,SAAU,GAEV,6CAAmBrB,GACnB,mDAAyBE,GACzB,sDAA4BJ,IC7BzBwB,MARf,WACE,OACE,6BACE,kBAAC3B,EAAD,QCIc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0926fe8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nexport const difficult = {\r\n    easy:1,\r\n    medium:2\r\n}\r\n\r\nexport function getRandomSign(difficulty){\r\n    const easy = \"abcdefghijklmnopqrstuvwxyz,.-\";\r\n    const medium = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ;:-\";\r\n\r\n    let resultArray = \"\";\r\n    if(difficulty === difficult.easy){\r\n        resultArray += easy;\r\n    }else if(difficulty === difficult.medium){\r\n        resultArray += easy;\r\n        resultArray += medium;\r\n    }\r\n    return resultArray.charAt(resultArray.length * Math.random());\r\n}","import React, {useEffect} from \"react\";\r\nimport {difficult, getRandomSign} from \"./SignGenerator\";\r\n\r\n\r\nexport function  ReactionArea(){\r\n\r\n\r\n\r\n    const[lastCharacterPressed,setLastCharacterPressed] = React.useState(\"\")\r\n    const[score,setScore] = React.useState(0);\r\n    const[randomCharacter,setRandomCharacter] = React.useState(\"\")\r\n\r\n    function determineRandomCharacter() {\r\n        return getRandomSign(difficult.medium)\r\n    }\r\n\r\n    useEffect(\r\n    () => {\r\n        setInterval(setRandomCharacter(determineRandomCharacter()), 5000);\r\n    },[lastCharacterPressed,score]\r\n    )\r\n\r\n    function onKeyPressed(e) {\r\n        if(e.key == 16){\r\n            return;\r\n        }\r\n        if(e.key === randomCharacter){\r\n            setScore(prevState => prevState+1);\r\n        }else{\r\n            setScore(prevState => prevState-1);\r\n        }\r\n        setLastCharacterPressed(e.key)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"reactArea\"\r\n            onKeyPress={e => onKeyPressed(e)}\r\n            tabIndex={0}\r\n            >\r\n            <h1>Current Score {score}</h1>\r\n            <h3>Character to press: {randomCharacter}</h3>\r\n            <h3>Last Character pressed:{lastCharacterPressed}</h3>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {ReactionArea} from \"./components/ReactionArea\";\n\nfunction App() {\n  return (\n    <div>\n      <ReactionArea></ReactionArea>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}